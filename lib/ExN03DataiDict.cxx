//
// File generated by rootcint at Wed Feb 22 17:24:35 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME ExN03DataiDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "ExN03DataiDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void ExN03Datai_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ExN03Datai(void *p = 0);
   static void *newArray_ExN03Datai(Long_t size, void *p);
   static void delete_ExN03Datai(void *p);
   static void deleteArray_ExN03Datai(void *p);
   static void destruct_ExN03Datai(void *p);
   static void streamer_ExN03Datai(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ExN03Datai*)
   {
      ::ExN03Datai *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ExN03Datai >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ExN03Datai", ::ExN03Datai::Class_Version(), "./ExN03Datai.hh", 16,
                  typeid(::ExN03Datai), DefineBehavior(ptr, ptr),
                  &::ExN03Datai::Dictionary, isa_proxy, 0,
                  sizeof(::ExN03Datai) );
      instance.SetNew(&new_ExN03Datai);
      instance.SetNewArray(&newArray_ExN03Datai);
      instance.SetDelete(&delete_ExN03Datai);
      instance.SetDeleteArray(&deleteArray_ExN03Datai);
      instance.SetDestructor(&destruct_ExN03Datai);
      instance.SetStreamerFunc(&streamer_ExN03Datai);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ExN03Datai*)
   {
      return GenerateInitInstanceLocal((::ExN03Datai*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ExN03Datai*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *ExN03Datai::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *ExN03Datai::Class_Name()
{
   return "ExN03Datai";
}

//______________________________________________________________________________
const char *ExN03Datai::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ExN03Datai*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ExN03Datai::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ExN03Datai*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ExN03Datai::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ExN03Datai*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ExN03Datai::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ExN03Datai*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void ExN03Datai::Streamer(TBuffer &R__b)
{
   // Stream an object of class ExN03Datai.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      {
         vector<double> &R__stl =  x_tpc;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  y_tpc;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  z_tpc;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  e_tpc;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  x_trigger;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  y_trigger;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  z_trigger;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  e_trigger;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  x_tar;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  y_tar;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  z_tar;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  e_tar;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  x_ch;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  y_ch;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  z_ch;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  e_ch;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  x_win;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  y_win;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  z_win;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  e_win;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  x_InRoh;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  y_InRoh;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  z_InRoh;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  e_InRoh;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  x_OutRoh;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  y_OutRoh;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  z_OutRoh;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  e_OutRoh;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  x_Kap;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  y_Kap;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  z_Kap;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  e_Kap;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> Et_tpc_tot;
      {
         vector<double> &R__stl =  Et_tar;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  Et_ch;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  Et_tpc;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  Et_trigger;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  Et_win;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  Et_InnerRohacell;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  Et_OuterRohacell;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  Et_Kapton;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  A;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  Z;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  trackID;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  parentID;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  x0;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  y0;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  z0;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  theta0;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  phi0;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  energy0;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<bool> &R__stl =  detection;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            bool R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> event;
      R__b.CheckByteCount(R__s, R__c, ExN03Datai::IsA());
   } else {
      R__c = R__b.WriteVersion(ExN03Datai::IsA(), kTRUE);
      TObject::Streamer(R__b);
      {
         vector<double> &R__stl =  x_tpc;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  y_tpc;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  z_tpc;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  e_tpc;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  x_trigger;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  y_trigger;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  z_trigger;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  e_trigger;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  x_tar;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  y_tar;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  z_tar;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  e_tar;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  x_ch;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  y_ch;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  z_ch;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  e_ch;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  x_win;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  y_win;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  z_win;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  e_win;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  x_InRoh;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  y_InRoh;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  z_InRoh;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  e_InRoh;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  x_OutRoh;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  y_OutRoh;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  z_OutRoh;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  e_OutRoh;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  x_Kap;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  y_Kap;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  z_Kap;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  e_Kap;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << Et_tpc_tot;
      {
         vector<double> &R__stl =  Et_tar;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  Et_ch;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  Et_tpc;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  Et_trigger;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  Et_win;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  Et_InnerRohacell;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  Et_OuterRohacell;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  Et_Kapton;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  A;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  Z;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  trackID;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  parentID;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  x0;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  y0;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  z0;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  theta0;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  phi0;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  energy0;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<bool> &R__stl =  detection;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<bool>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << event;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void ExN03Datai::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ExN03Datai.
      TClass *R__cl = ::ExN03Datai::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_tpc", (void*)&x_tpc);
      R__insp.InspectMember("vector<double>", (void*)&x_tpc, "x_tpc.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y_tpc", (void*)&y_tpc);
      R__insp.InspectMember("vector<double>", (void*)&y_tpc, "y_tpc.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z_tpc", (void*)&z_tpc);
      R__insp.InspectMember("vector<double>", (void*)&z_tpc, "z_tpc.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e_tpc", (void*)&e_tpc);
      R__insp.InspectMember("vector<double>", (void*)&e_tpc, "e_tpc.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_trigger", (void*)&x_trigger);
      R__insp.InspectMember("vector<double>", (void*)&x_trigger, "x_trigger.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y_trigger", (void*)&y_trigger);
      R__insp.InspectMember("vector<double>", (void*)&y_trigger, "y_trigger.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z_trigger", (void*)&z_trigger);
      R__insp.InspectMember("vector<double>", (void*)&z_trigger, "z_trigger.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e_trigger", (void*)&e_trigger);
      R__insp.InspectMember("vector<double>", (void*)&e_trigger, "e_trigger.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_tar", (void*)&x_tar);
      R__insp.InspectMember("vector<double>", (void*)&x_tar, "x_tar.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y_tar", (void*)&y_tar);
      R__insp.InspectMember("vector<double>", (void*)&y_tar, "y_tar.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z_tar", (void*)&z_tar);
      R__insp.InspectMember("vector<double>", (void*)&z_tar, "z_tar.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e_tar", (void*)&e_tar);
      R__insp.InspectMember("vector<double>", (void*)&e_tar, "e_tar.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_ch", (void*)&x_ch);
      R__insp.InspectMember("vector<double>", (void*)&x_ch, "x_ch.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y_ch", (void*)&y_ch);
      R__insp.InspectMember("vector<double>", (void*)&y_ch, "y_ch.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z_ch", (void*)&z_ch);
      R__insp.InspectMember("vector<double>", (void*)&z_ch, "z_ch.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e_ch", (void*)&e_ch);
      R__insp.InspectMember("vector<double>", (void*)&e_ch, "e_ch.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_win", (void*)&x_win);
      R__insp.InspectMember("vector<double>", (void*)&x_win, "x_win.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y_win", (void*)&y_win);
      R__insp.InspectMember("vector<double>", (void*)&y_win, "y_win.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z_win", (void*)&z_win);
      R__insp.InspectMember("vector<double>", (void*)&z_win, "z_win.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e_win", (void*)&e_win);
      R__insp.InspectMember("vector<double>", (void*)&e_win, "e_win.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_InRoh", (void*)&x_InRoh);
      R__insp.InspectMember("vector<double>", (void*)&x_InRoh, "x_InRoh.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y_InRoh", (void*)&y_InRoh);
      R__insp.InspectMember("vector<double>", (void*)&y_InRoh, "y_InRoh.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z_InRoh", (void*)&z_InRoh);
      R__insp.InspectMember("vector<double>", (void*)&z_InRoh, "z_InRoh.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e_InRoh", (void*)&e_InRoh);
      R__insp.InspectMember("vector<double>", (void*)&e_InRoh, "e_InRoh.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_OutRoh", (void*)&x_OutRoh);
      R__insp.InspectMember("vector<double>", (void*)&x_OutRoh, "x_OutRoh.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y_OutRoh", (void*)&y_OutRoh);
      R__insp.InspectMember("vector<double>", (void*)&y_OutRoh, "y_OutRoh.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z_OutRoh", (void*)&z_OutRoh);
      R__insp.InspectMember("vector<double>", (void*)&z_OutRoh, "z_OutRoh.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e_OutRoh", (void*)&e_OutRoh);
      R__insp.InspectMember("vector<double>", (void*)&e_OutRoh, "e_OutRoh.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_Kap", (void*)&x_Kap);
      R__insp.InspectMember("vector<double>", (void*)&x_Kap, "x_Kap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y_Kap", (void*)&y_Kap);
      R__insp.InspectMember("vector<double>", (void*)&y_Kap, "y_Kap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z_Kap", (void*)&z_Kap);
      R__insp.InspectMember("vector<double>", (void*)&z_Kap, "z_Kap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e_Kap", (void*)&e_Kap);
      R__insp.InspectMember("vector<double>", (void*)&e_Kap, "e_Kap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Et_tpc_tot", &Et_tpc_tot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Et_tar", (void*)&Et_tar);
      R__insp.InspectMember("vector<double>", (void*)&Et_tar, "Et_tar.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Et_ch", (void*)&Et_ch);
      R__insp.InspectMember("vector<double>", (void*)&Et_ch, "Et_ch.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Et_tpc", (void*)&Et_tpc);
      R__insp.InspectMember("vector<double>", (void*)&Et_tpc, "Et_tpc.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Et_trigger", (void*)&Et_trigger);
      R__insp.InspectMember("vector<double>", (void*)&Et_trigger, "Et_trigger.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Et_win", (void*)&Et_win);
      R__insp.InspectMember("vector<double>", (void*)&Et_win, "Et_win.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Et_InnerRohacell", (void*)&Et_InnerRohacell);
      R__insp.InspectMember("vector<double>", (void*)&Et_InnerRohacell, "Et_InnerRohacell.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Et_OuterRohacell", (void*)&Et_OuterRohacell);
      R__insp.InspectMember("vector<double>", (void*)&Et_OuterRohacell, "Et_OuterRohacell.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Et_Kapton", (void*)&Et_Kapton);
      R__insp.InspectMember("vector<double>", (void*)&Et_Kapton, "Et_Kapton.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "A", (void*)&A);
      R__insp.InspectMember("vector<int>", (void*)&A, "A.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z", (void*)&Z);
      R__insp.InspectMember("vector<int>", (void*)&Z, "Z.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackID", (void*)&trackID);
      R__insp.InspectMember("vector<int>", (void*)&trackID, "trackID.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parentID", (void*)&parentID);
      R__insp.InspectMember("vector<int>", (void*)&parentID, "parentID.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x0", (void*)&x0);
      R__insp.InspectMember("vector<double>", (void*)&x0, "x0.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y0", (void*)&y0);
      R__insp.InspectMember("vector<double>", (void*)&y0, "y0.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z0", (void*)&z0);
      R__insp.InspectMember("vector<double>", (void*)&z0, "z0.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta0", (void*)&theta0);
      R__insp.InspectMember("vector<double>", (void*)&theta0, "theta0.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi0", (void*)&phi0);
      R__insp.InspectMember("vector<double>", (void*)&phi0, "phi0.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy0", (void*)&energy0);
      R__insp.InspectMember("vector<double>", (void*)&energy0, "energy0.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detection", (void*)&detection);
      R__insp.InspectMember("vector<bool>", (void*)&detection, "detection.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event", &event);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ExN03Datai(void *p) {
      return  p ? new(p) ::ExN03Datai : new ::ExN03Datai;
   }
   static void *newArray_ExN03Datai(Long_t nElements, void *p) {
      return p ? new(p) ::ExN03Datai[nElements] : new ::ExN03Datai[nElements];
   }
   // Wrapper around operator delete
   static void delete_ExN03Datai(void *p) {
      delete ((::ExN03Datai*)p);
   }
   static void deleteArray_ExN03Datai(void *p) {
      delete [] ((::ExN03Datai*)p);
   }
   static void destruct_ExN03Datai(void *p) {
      typedef ::ExN03Datai current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ExN03Datai(TBuffer &buf, void *obj) {
      ((::ExN03Datai*)obj)->::ExN03Datai::Streamer(buf);
   }
} // end of namespace ROOT for class ::ExN03Datai

namespace ROOT {
   void vectorlEboolgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEboolgR_Dictionary();
   static void *new_vectorlEboolgR(void *p = 0);
   static void *newArray_vectorlEboolgR(Long_t size, void *p);
   static void delete_vectorlEboolgR(void *p);
   static void deleteArray_vectorlEboolgR(void *p);
   static void destruct_vectorlEboolgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<bool>*)
   {
      vector<bool> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<bool>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<bool>", -2, "vectorbool.dll", 0,
                  typeid(vector<bool>), DefineBehavior(ptr, ptr),
                  0, &vectorlEboolgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<bool>) );
      instance.SetNew(&new_vectorlEboolgR);
      instance.SetNewArray(&newArray_vectorlEboolgR);
      instance.SetDelete(&delete_vectorlEboolgR);
      instance.SetDeleteArray(&deleteArray_vectorlEboolgR);
      instance.SetDestructor(&destruct_vectorlEboolgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<bool> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<bool>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEboolgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<bool>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEboolgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<bool> : new vector<bool>;
   }
   static void *newArray_vectorlEboolgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<bool>[nElements] : new vector<bool>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEboolgR(void *p) {
      delete ((vector<bool>*)p);
   }
   static void deleteArray_vectorlEboolgR(void *p) {
      delete [] ((vector<bool>*)p);
   }
   static void destruct_vectorlEboolgR(void *p) {
      typedef vector<bool> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<bool>

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

/********************************************************
* ExN03DataiDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableExN03DataiDict();

extern "C" void G__set_cpp_environmentExN03DataiDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("ExN03Datai.hh");
  G__cpp_reset_tagtableExN03DataiDict();
}
#include <new>
extern "C" int G__cpp_dllrevExN03DataiDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* ExN03Datai */
static int G__ExN03DataiDict_184_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ExN03Datai* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ExN03Datai[n];
     } else {
       p = new((void*) gvp) ExN03Datai[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ExN03Datai;
     } else {
       p = new((void*) gvp) ExN03Datai;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ExN03DataiDictLN_ExN03Datai));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExN03DataiDict_184_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ExN03Datai*) G__getstructoffset())->ClearEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExN03DataiDict_184_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ExN03Datai::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExN03DataiDict_184_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ExN03Datai::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExN03DataiDict_184_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ExN03Datai::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExN03DataiDict_184_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ExN03Datai::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExN03DataiDict_184_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ExN03Datai*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExN03DataiDict_184_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ExN03Datai::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExN03DataiDict_184_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ExN03Datai::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExN03DataiDict_184_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ExN03Datai::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ExN03DataiDict_184_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ExN03Datai::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ExN03DataiDict_184_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ExN03Datai* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ExN03Datai(*(ExN03Datai*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ExN03DataiDictLN_ExN03Datai));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ExN03Datai G__TExN03Datai;
static int G__ExN03DataiDict_184_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ExN03Datai*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ExN03Datai*) (soff+(sizeof(ExN03Datai)*i)))->~G__TExN03Datai();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ExN03Datai*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ExN03Datai*) (soff))->~G__TExN03Datai();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ExN03DataiDict_184_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ExN03Datai* dest = (ExN03Datai*) G__getstructoffset();
   *dest = *(ExN03Datai*) libp->para[0].ref;
   const ExN03Datai& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* ExN03Datai */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncExN03DataiDict {
 public:
  G__Sizep2memfuncExN03DataiDict(): p(&G__Sizep2memfuncExN03DataiDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncExN03DataiDict::*p)();
};

size_t G__get_sizep2memfuncExN03DataiDict()
{
  G__Sizep2memfuncExN03DataiDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceExN03DataiDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ExN03DataiDictLN_ExN03Datai))) {
     ExN03Datai *G__Lderived;
     G__Lderived=(ExN03Datai*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ExN03DataiDictLN_ExN03Datai),G__get_linked_tagnum(&G__ExN03DataiDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableExN03DataiDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ExN03DataiDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ExN03DataiDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ExN03DataiDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ExN03DataiDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ExN03DataiDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ExN03DataiDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* ExN03Datai */
static void G__setup_memvarExN03Datai(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ExN03DataiDictLN_ExN03Datai));
   { ExN03Datai *p; p=(ExN03Datai*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->x_tpc)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"x_tpc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y_tpc)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"y_tpc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z_tpc)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"z_tpc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e_tpc)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"e_tpc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x_trigger)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"x_trigger=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y_trigger)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"y_trigger=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z_trigger)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"z_trigger=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e_trigger)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"e_trigger=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x_tar)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"x_tar=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y_tar)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"y_tar=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z_tar)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"z_tar=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e_tar)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"e_tar=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x_ch)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"x_ch=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y_ch)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"y_ch=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z_ch)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"z_ch=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e_ch)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"e_ch=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x_win)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"x_win=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y_win)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"y_win=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z_win)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"z_win=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e_win)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"e_win=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x_InRoh)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"x_InRoh=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y_InRoh)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"y_InRoh=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z_InRoh)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"z_InRoh=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e_InRoh)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"e_InRoh=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x_OutRoh)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"x_OutRoh=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y_OutRoh)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"y_OutRoh=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z_OutRoh)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"z_OutRoh=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e_OutRoh)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"e_OutRoh=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x_Kap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"x_Kap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y_Kap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"y_Kap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z_Kap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"z_Kap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e_Kap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"e_Kap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Et_tpc_tot)-(long)(p)),100,0,0,-1,-1,-1,1,"Et_tpc_tot=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Et_tar)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"Et_tar=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Et_ch)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"Et_ch=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Et_tpc)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"Et_tpc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Et_trigger)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"Et_trigger=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Et_win)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"Et_win=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Et_InnerRohacell)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"Et_InnerRohacell=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Et_OuterRohacell)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"Et_OuterRohacell=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Et_Kapton)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"Et_Kapton=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->A)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"A=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"Z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackID)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"trackID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->parentID)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"parentID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x0)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"x0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y0)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"y0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z0)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"z0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->theta0)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"theta0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi0)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"phi0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->energy0)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"energy0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->detection)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_vectorlEboolcOallocatorlEboolgRsPgR),G__defined_typename("vector<bool>"),-1,1,"detection=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->event)-(long)(p)),105,0,0,-1,-1,-1,1,"event=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ExN03DataiDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarExN03DataiDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncExN03Datai(void) {
   /* ExN03Datai */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ExN03DataiDictLN_ExN03Datai));
   G__memfunc_setup("ExN03Datai",849,G__ExN03DataiDict_184_0_1, 105, G__get_linked_tagnum(&G__ExN03DataiDictLN_ExN03Datai), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearEvent",1001,G__ExN03DataiDict_184_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ExN03DataiDict_184_0_3, 85, G__get_linked_tagnum(&G__ExN03DataiDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ExN03Datai::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ExN03DataiDict_184_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ExN03Datai::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ExN03DataiDict_184_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ExN03Datai::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ExN03DataiDict_184_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ExN03Datai::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ExN03DataiDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ExN03DataiDict_184_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ExN03DataiDict_184_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ExN03Datai::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ExN03DataiDict_184_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ExN03Datai::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ExN03DataiDict_184_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ExN03Datai::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ExN03DataiDict_184_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ExN03Datai::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ExN03Datai", 849, G__ExN03DataiDict_184_0_15, (int) ('i'), G__get_linked_tagnum(&G__ExN03DataiDictLN_ExN03Datai), -1, 0, 1, 1, 1, 0, "u 'ExN03Datai' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ExN03Datai", 975, G__ExN03DataiDict_184_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ExN03DataiDict_184_0_17, (int) ('u'), G__get_linked_tagnum(&G__ExN03DataiDictLN_ExN03Datai), -1, 1, 1, 1, 1, 0, "u 'ExN03Datai' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncExN03DataiDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalExN03DataiDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcExN03DataiDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__ExN03DataiDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__ExN03DataiDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__ExN03DataiDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__ExN03DataiDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__ExN03DataiDictLN_vectorlEboolcOallocatorlEboolgRsPgR = { "vector<bool,allocator<bool> >" , 99 , -1 };
G__linked_taginfo G__ExN03DataiDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__ExN03DataiDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ExN03DataiDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__ExN03DataiDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ExN03DataiDictLN_ExN03Datai = { "ExN03Datai" , 99 , -1 };
G__linked_taginfo G__ExN03DataiDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__ExN03DataiDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableExN03DataiDict() {
  G__ExN03DataiDictLN_TClass.tagnum = -1 ;
  G__ExN03DataiDictLN_TBuffer.tagnum = -1 ;
  G__ExN03DataiDictLN_TMemberInspector.tagnum = -1 ;
  G__ExN03DataiDictLN_TObject.tagnum = -1 ;
  G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__ExN03DataiDictLN_vectorlEboolcOallocatorlEboolgRsPgR.tagnum = -1 ;
  G__ExN03DataiDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__ExN03DataiDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ExN03DataiDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__ExN03DataiDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ExN03DataiDictLN_ExN03Datai.tagnum = -1 ;
  G__ExN03DataiDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__ExN03DataiDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableExN03DataiDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__ExN03DataiDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__ExN03DataiDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__ExN03DataiDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__ExN03DataiDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__ExN03DataiDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__ExN03DataiDictLN_vectorlEboolcOallocatorlEboolgRsPgR);
   G__get_linked_tagnum_fwd(&G__ExN03DataiDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__ExN03DataiDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ExN03DataiDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ExN03DataiDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ExN03DataiDictLN_ExN03Datai),sizeof(ExN03Datai),-1,29952,(char*)NULL,G__setup_memvarExN03Datai,G__setup_memfuncExN03Datai);
   G__get_linked_tagnum_fwd(&G__ExN03DataiDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__ExN03DataiDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupExN03DataiDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupExN03DataiDict()");
  G__set_cpp_environmentExN03DataiDict();
  G__cpp_setup_tagtableExN03DataiDict();

  G__cpp_setup_inheritanceExN03DataiDict();

  G__cpp_setup_typetableExN03DataiDict();

  G__cpp_setup_memvarExN03DataiDict();

  G__cpp_setup_memfuncExN03DataiDict();
  G__cpp_setup_globalExN03DataiDict();
  G__cpp_setup_funcExN03DataiDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncExN03DataiDict();
  return;
}
class G__cpp_setup_initExN03DataiDict {
  public:
    G__cpp_setup_initExN03DataiDict() { G__add_setup_func("ExN03DataiDict",(G__incsetup)(&G__cpp_setupExN03DataiDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initExN03DataiDict() { G__remove_setup_func("ExN03DataiDict"); }
};
G__cpp_setup_initExN03DataiDict G__cpp_setup_initializerExN03DataiDict;

